#!/usr/bin/perl

#
# Copyright (C) 2025 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

use strict;
use warnings;
use IO::Socket::SSL;
use Mail::IMAPClient;

# Check for mandatory task_id argument
if (@ARGV < 1) {
    die "Usage: $0 <timestamp_file>\n";
}
my $timestamp_file = $ARGV[0];
my $mtime = 0;
# Get file modification time
open my $ft, '<', $timestamp_file or warn "Could not read $timestamp_file: $!\n";
$mtime = (stat($ft))[9] or warn "Could not get file modification time: $!\n";
close($ft);

my $server = $ENV{'MAIL_HOST'}
    or die "MAIL_HOST environment variable not set.\n";  # 'imap.example.com'
if (!$ENV{'LOCALUSER'}) {
    die "LOCALUSER environment variable not set.\n";  # 'user@example.com';
}
my $username = $ENV{'LOCALUSER'} . '*vmail';
my $password_file = "/etc/imapsync/vmail.pwd";
my $imap_debug = $ENV{'IMAP_DEBUG'} // 0;

# Read password from file
my $password = do { local $/; open my $fp, '<', $password_file ; <$fp> }
    or die "Could not read password from file: $password_file\n";
chomp($password);

# Establish IMAP connection
my $imap = Mail::IMAPClient->new(
    Server   => $server,
    User     => $username,
    Password => $password,
    Debug => $imap_debug,
) or die "Could not connect to IMAP server: $@\n";

# Check if the IMAP server has non-standard capability
if (!$imap->has_capability("FILTER=SIEVE")) {
    die "Could not find capability FILTER=SIEVE\n";
}

# Select INBOX
$imap->select('INBOX') or die("Cannot select mailbox INBOX: " . $imap->LastError . "\n");

# Build IMAP FILTER SIEVE DELIVERY command with searching criteria
my $imap_filter_cmd;
if ($mtime) {
    $imap_filter_cmd = qq(FILTER SIEVE DELIVERY SINCE ) . $imap->Rfc2060_date($mtime);
} else {
    $imap_filter_cmd = qq(FILTER SIEVE DELIVERY ALL);
}
my $result = $imap->_imap_command($imap_filter_cmd);
if ($result) {
    $imap->close(); # Implicitly expunges \Deleted messages from INBOX
} else {
    warn "FILTER SIEVE: " . $imap->LastError . "\n";
}

# Logout
$imap->logout();
